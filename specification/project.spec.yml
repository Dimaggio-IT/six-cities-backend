openapi: 3.0.0
info:
  title: API сервер для демо-проекта «Шесть городов».
  description: |-
    * Список ресурсов и маршрутов сервера «Шесть городов».
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0

tags:
- name: users
  description: Действия с пользователем.
- name: offers
  description: Действия с объявлениями.
- name: comments
  description: Действия с комментариями.

paths:
  /users/register:
    post:
      tags:
        - users
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя.

      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true

      responses:
        "201":
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authUser'

        "409":
          description: Пользователь с таким email уже существует.

  /users/login:
    post:
      tags:
        - users
      summary: Авторизация пользователя
      description: Авторизует пользователя на основе логина и пароля

      requestBody:
        description: Информация для авторизации пользователя.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authUser'
        required: true

      responses:
        "201":
          description: Пользователь авторизован. Токен пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userToken'
        "401":
          description: Неверный логин или пароль.

    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю

      requestBody:
        description: Информация для проверки состояния пользователя.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userToken'
        required: true

      responses:
        "200":
          description: Информация по авторизованному пользователю.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authUser'
        "401":
          description: Неверный логин или пароль.
        "403":
          description: Получить информацию о пользователе может только владелец аккаунта.

  /users/avatar/{userId}:
    post:
      tags:
        - users
      summary: Загрузить изображение аватара
      description: Загружает изображение аватара пользователя. Изображение
        аватара должно быть в формате `png` или `jpg`.

      requestBody:
        description: Загружает изображение аватара пользователя.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userAvatar'
        required: true

      responses:
        "200":
          description: Аватар успешно загружен.
        "401":
          description: Ошибка загрузки аватара.

  /offers:
    get:
      tags:
        - offers
      summary: Получение предложения по аренде
      description: Получает список предложений по аренде.
      responses:
        "200":
          description: Список предложений.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/unknown'
    post:
      tags:
        - offers
      summary: Создание предложения по аренде
      description: Создаёт предложение по аренде

      requestBody:
        description: Информация для создания предложения по аренде.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/unknown'
        required: true

      responses:
       "200":
          description: Предложение по аренде успешно создано.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unknown'
       "403":
          description: Создавать предложения по аренде могут только авторизованные пользователи.

  /offers/{offerId}:
    get:
      tags:
        - offers
      summary: Получение предложения по аренде
      description: Получает предложение по аренде.

      responses:
        "200":
          description: Предложение по аренде успешно получено.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unknown'

    patch:
      tags:
        - offers
      summary: Обновление предложения по аренде
      description: Обновляет предложение по аренде.

      requestBody:
        description: Информация для обновления предложения.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/unknown'
        required: true

      responses:
        "200":
          description: Предложение по аренде успешно обновлено.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unknown'

        "403":
          description: Нет прав для редактирования.

    delete:
      tags:
        - offers
      summary: Удаление предложения по аренде
      description: Удаляет предложение по аренде.

      responses:
        "204":
          description: Предложение по аренде успешно удалено.
        "403":
          description: Нет прав для удаления этого предложения.

  /offers/premium:
    get:
      tags:
        - offers
      summary: Получение премиальных предложений по аренде
      description: Получает список премиальных предложений. Сервис возвращает не больше 3 предложений с флагом «Premium»

      responses:
        "200":
          description: Список предложений с флагом «Premium».
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/unknown'

  /offers/favorite:
    get:
      tags:
        - offers
      summary: Получение избранных предложений по аренде
      description: Получает список избранных предложений.

      responses:
        "200":
          description: Список избранных предложений.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/unknown'
        "403":
          description: Ресурс доступен только авторизованным клиентам.

  /offers/favorite/{offerId}:
    post:
      tags:
        - offers
      summary: Добавление предложения в Избранное
      description: Изменяет статус Избранное предложения.

      requestBody:
        description: Информация для редактирования предложения по аренде.
        content:
          application/json:
            schema:
              type: object
              properties:
                offerId:
                  type: string
                  example: 6329c3d6a04ab1061c6425ea
        required: true

      responses:
        "204":
          description: Статус предложения Избранное успешно изменён.
        "403":
          description: Изменять статус может только авторизованный пользователь.

    delete:
      tags:
        - offers
      summary: Удаление предложения из Избранного
      description: Изменяет статус Избранное предложения.

      requestBody:
        description: Информация для редактирования предложения по аренде.
        content:
          application/json:
            schema:
              type: object
              properties:
                offerId:
                  type: string
                  example: 6329c3d6a04ab1061c6425ea
        required: true

      responses:
        "204":
          description: Предложение по аренде успешно удалено из Избранного.
        "403":
          description: Изменять статус может только авторизованный пользователь.

components:
  schemas:
    createUser:
      type: object
      properties:
        name:
          type: string
          example: Svetlana Ivanova
        email:
          type: string
          example: first@test.io
        avatar:
          type: string
          example: https://14.design.htmlacademy.pro/static/avatar/1.jpg
        type:
          type: string
          example: обычный
        password:
          type: string
          example: pa$$w0rd

    authUser:
      type: object
      properties:
        name:
          type: string
          example: Svetlana Ivanova
        email:
          type: string
          example: first@test.io
        avatar:
          type: string
          example: https://14.design.htmlacademy.pro/static/avatar/1.jpg
        type:
          type: string
          example: pro

    userToken:
      type: object
      properties:
        token:
          type: string
          example: 6329c3d6a04ab1061c6425ea
        email:
          type: string
          example: middle@test.io

    userAvatar:
      type: object
      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea
        avatar:
          type: string
          example: https://14.design.htmlacademy.pro/static/avatar/1.jpg

    unknown:
      type: object
      properties:
        par:
          type: string
          example: test
